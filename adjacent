#!/usr/bin/env python3

from __future__ import print_function

import re

def printed_width(s):
  chars = 0
  i = 0
  while i < len(s):
    c = s[i]
    if c == '\x1b':
      m = re.search("""\[[0-9]+(;[0-9]+)?m""", s[i+1:])
      if m:
        i += 1+len(m.group(0))
        continue
    i += 1
    if c == '\t':
      chars += 2
    else:
      chars += 1
  return chars

def pad_to(s, w):
  return s + " " * (w - printed_width(s))

def open_files(names):
  return [open(n, "r") for n in names]

def close_files(fhs):
  for fh in fhs:
    fh.close()

if __name__ == "__main__":
  import argparse
  import itertools

  parser = argparse.ArgumentParser(
    formatter_class=argparse.ArgumentDefaultsHelpFormatter)
  parser.add_argument('-w', '--width',
                      default=0,
                      type=int,
                      help="total width to aim for (0 to use first file)")
  parser.add_argument('--sep',
                      default=" ",
                      help="column separator string")
  parser.add_argument('--sep-count',
                      metavar='COUNT',
                      default=0,
                      type=int,
                      help="number of times to repeat column separator")
  parser.add_argument("files", nargs='+')

  args = parser.parse_args()
  num_files = len(args.files)

  # compute file widths (except for last)
  if args.width == 0:
    fhs = open_files(args.files)
    widths = [max([printed_width(l) for l in fh]) for fh in fhs]
    close_files(fhs)
  else:
    widths = [args.width//num_files for _ in range(num_files-1)]

  fhs = open_files(args.files)
  for lines in itertools.zip_longest(*fhs, fillvalue='\n'):
    file_lines = []
    for i in range(num_files-1):
      line = lines[i].replace("\t", "  ").rstrip('\n')
      file_lines.append(pad_to(line, widths[i]))
    file_lines.append(lines[-1])
    print(*file_lines, sep=args.sep * args.sep_count, end="")
  close_files(fhs)
